// BankInterface interface
interface BankInterface {
    double getBalance();
    double getInterestRate();
}

// BankA class implementing BankInterface
class BankA implements BankInterface {
    private double balance = 0;

    BankA(double depositAmount) {
        this.balance = depositAmount;
    }

    @Override
    public double getBalance() {
        return balance;
    }

    @Override
    public double getInterestRate() {
        return 0.07; // 7% interest rate
    }
}

// BankB class implementing BankInterface
class BankB implements BankInterface {
    private double balance = 0;

    BankB(double depositAmount) {
        this.balance = depositAmount;
    }

    @Override
    public double getBalance() {
        return balance;
    }

    @Override
    public double getInterestRate() {
        return 0.074; // 7.4% interest rate
    }
}

// BankC class implementing BankInterface
class BankC implements BankInterface {
    private double balance = 0;

    BankC(double depositAmount) {
        this.balance = depositAmount;
    }

    @Override
    public double getBalance() {
        return balance;
    }

    @Override
    public double getInterestRate() {
        return 0.079; // 7.9% interest rate
    }
}

public class Main {
    public static void main(String[] args) {
        // Deposits into banks A, B, and C
        BankInterface bankA = new BankA(10000);
        BankInterface bankB = new BankB(150000);
        BankInterface bankC = new BankC(200000);

        // Displaying balance and interest rate for each bank
        System.out.println("Bank A - Balance: $" + bankA.getBalance() + ", Interest Rate: " + (bankA.getInterestRate() * 100) + "%");
        System.out.println("Bank B - Balance: $" + bankB.getBalance() + ", Interest Rate: " + (bankB.getInterestRate() * 100) + "%");
        System.out.println("Bank C - Balance: $" + bankC.getBalance() + ", Interest Rate: " + (bankC.getInterestRate() * 100) + "%");
    }
}

2)
import java.util.Scanner;
interface WaterConservationSystem {
    int calculateTrappedWater(int[] blockHeights);
}

 abstract class RainySeasonConservation implements WaterConservationSystem {
    // Add any common methods or properties here

    @Override
    public abstract int calculateTrappedWater(int[] blockHeights);
}

class CityBlockCons extends RainySeasonConservation {
    @Override
    public int calculateTrappedWater(int[] blockHeights) {
        int n = blockHeights.length;
        if (n <= 2) {
            return 0; // There can be no trapped water with less than 3 blocks
        }

        int[] leftMax = new int[n];
        int[] rightMax = new int[n];

        leftMax[0] = blockHeights[0];
        for (int i = 1; i < n; i++) {
            leftMax[i] = Math.max(leftMax[i - 1], blockHeights[i]);
        }

        rightMax[n - 1] = blockHeights[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            rightMax[i] = Math.max(rightMax[i + 1], blockHeights[i]);
        }

        int trappedWater = 0;
        for (int i = 0; i < n; i++) {
            trappedWater += Math.max(0, Math.min(leftMax[i], rightMax[i]) - blockHeights[i]);
        }

        return trappedWater;
    }
}



public class WCS{
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter the number of blocks: ");
        int n = scanner.nextInt();
        
        System.out.println("Enter the heights of the blocks:");
        int[] blockHeights = new int[n];
        for (int i = 0; i < n; i++) {
            blockHeights[i] = scanner.nextInt();
        }
        
        WaterConservationSystem conservationSystem = new CityBlockCons();
        int trappedWaterVolume = conservationSystem.calculateTrappedWater(blockHeights);
        System.out.println("Total volume of water that can be conserved: " + trappedWaterVolume);
        
        scanner.close();
    }
}
